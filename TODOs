Translating 137 rules in spine...

1 TODO:  unable to bind vars {'what'} in constraint pi7_1(what) == self.pat 
 'S4.2.6'
isDeactivated(x, Conceal-request(what, whom, start, end)) <-
	pi7_1(what) = pat 

2 TODO:  unable to bind vars {'spcty'} in constraint spcty == "GP" 
 'S3.3.5'
canActivate(cli, General-practitioner(pat)) <-
	canActivate(cli, Treating-clinician(pat, org, spcty)), spcty = "GP" 

3 TODO:  could not translate constraint: (what,who) = ((pat,ids,orgs,authors,subjects,from-time,to-time),(orgs1,readers1,spctys1)) 
 'S4.2.1'
canActivate(pat, Conceal-request(what, who, start, end)) <-
	hasActivated(pat, Patient()), count-conceal-requests(n, pat), (what,who) = ((pat,ids,orgs,authors,subjects,from-time,to-time),(orgs1,readers1,spctys1)), n < 100 

4 TODO:  could not translate constraint: (what,who) = ((pat,ids,orgs,authors,subjects,from-time,to-time),(orgs1,readers1,spctys1)) 
 'S4.2.2'
canActivate(ag, Conceal-request(what, who, start, end)) <-
	hasActivated(ag, Agent(pat)), count-conceal-requests(n, pat), (what,who) = ((pat,ids,orgs,authors,subjects,from-time,to-time),(orgs1,readers1,spctys1)), n < 100 

5 TODO:  unable to bind vars {'pat'} in constraint pi7_1(self.what) == pat 
 'S4.2.5'
canDeactivate(cli, x, Conceal-request(what, whom, start, end)) <-
	hasActivated(cli, Spine-clinician(ra, org, spcty)), canActivate(cli, General-practitioner(pat)), pi7_1(what) = pat 

6 TODO:  could not translate constraint: (what,who) = ((pat,ids,orgs,authors,subjects,from-time,to-time),(orgs1,readers1,spctys1)) 
 'S4.2.7'
count-conceal-requests(count<y>, pat) <-
	hasActivated(x, Conceal-request(y)), (what,who) = ((pat,ids,orgs,authors,subjects,from-time,to-time),(orgs1,readers1,spctys1)), y = (what,who,start,end) 

7 TODO:  could not translate constraint: a = (pat,id) 
 'S4.2.12'
count-concealed-by-spine-patient(count<x>, a, b) <-
	hasActivated(x, Concealed-by-spine-patient(what, who, start, end)), a = (pat,id), b = (org,reader,spcty), what = (pat,ids,orgs,authors,subjects,from-time,to-time), whom = (orgs1,readers1,spctys1), Get-spine-record-org(pat, id) in orgs, Get-spine-record-author(pat, id) in authors, sub in Get-spine-record-subjects(pat, id), sub in subjects, Get-spine-record-time(pat, id) in [from-time, to-time], id in ids, org in orgs1, reader in readers1, spcty in spctys1, Current-time() in [start, end], Get-spine-record-third-parties(pat, id) = emptyset, "non-clinical" notin Get-spine-record-subjects(pat, id) 

8 TODO:  unbound vars {'a', 'b'} in count-concealed-by-spine-patient(n, a, b) 
 'S5.3.1'
permits(pat, Read-spine-record-item(pat, id)) <-
	hasActivated(pat, Patient()), hasActivated(x, One-off-consent(pat)), count-concealed-by-spine-patient(n, a, b), count-concealed-by-spine-clinician(m, pat, id), third-party-consent(consenters, pat, id), n = 0, m = 0, a = (pat,id), b = ("No-org",pat,"No-spcty"), Get-spine-record-third-parties(pat, id) subseteq consenters 

9 TODO:  unbound vars {'a', 'b'} in count-concealed-by-spine-patient(n, a, b) 
 'S5.3.2'
permits(ag, Read-spine-record-item(pat, id)) <-
	hasActivated(ag, Agent(pat)), hasActivated(x, One-off-consent(pat)), count-concealed-by-spine-patient(n, a, b), count-concealed-by-spine-clinician(m, pat, id), third-party-consent(consenters, pat, id), n = 0, m = 0, a = (pat,id), b = ("No-org",ag,"No-spcty"), Get-spine-record-third-parties(pat, id) subseteq consenters 

10 TODO:  unbound vars {'a', 'b'} in count-concealed-by-spine-patient(n, a, b) 
 'S5.3.4'
permits(cli, Read-spine-record-item(pat, id)) <-
	hasActivated(cli, Spine-clinician(ra, org, spcty)), hasActivated(x, One-off-consent(pat)), canActivate(cli, Treating-clinician(pat, org, spcty)), count-concealed-by-spine-patient(n, a, b), n = 0, a = (pat,id), b = (org,cli,spcty), Get-spine-record-subjects(pat, id) subseteq Permitted-subjects(spcty) 

11 TODO:  Not implemented: 3 hasAcs in a rule. 
 'S5.3.5'
permits(cli, Read-spine-record-item(pat, id)) <-
	hasActivated(cli, Spine-clinician(ra, org, spcty)), hasActivated(x, One-off-consent(pat)), canActivate(cli, Treating-clinician(pat, org, spcty)), hasActivated(y, Authenticated-express-consent(pat, cli)), Get-spine-record-subjects(pat, id) subseteq Permitted-subjects(spcty) 

Done. Wrote to spine.py


Translating 35 rules in pds...

Done. Wrote to pds.py


Translating 168 rules in hospital...

12 TODO:  unable to bind vars {'what'} in constraint pi7_1(what) == self.pat 
 'A4.2.6'
isDeactivated(x, Concealed-by-patient(what, whom, start, end)) <-
	pi7_1(what) = pat 

13 TODO:  could not translate constraint: what = (pat,ids,authors,groups,subjects,from-time,to-time) 
 'A4.2.1'
canActivate(pat, Concealed-by-patient(what, who, start, end)) <-
	hasActivated(pat, Patient()), count-concealed-by-patient(n, pat), what = (pat,ids,authors,groups,subjects,from-time,to-time), who = (orgs1,readers1,groups1,spctys1), n < 100 

14 TODO:  could not translate constraint: what = (pat,ids,authors,groups,subjects,from-time,to-time) 
 'A4.2.2'
canActivate(ag, Concealed-by-patient(what, who, start, end)) <-
	hasActivated(ag, Agent(pat)), count-concealed-by-patient(n, pat), what = (pat,ids,authors,groups,subjects,from-time,to-time), who = (orgs1,readers1,groups1,spctys1), n < 100 

15 TODO:  could not translate constraint: what = (pat,ids,authors,groups,subjects,from-time,to-time) 
 'A4.2.7'
count-concealed-by-patient(count<y>, pat) <-
	hasActivated(x, Concealed-by-patient(y)), what = (pat,ids,authors,groups,subjects,from-time,to-time), who = (orgs1,readers1,groups1,spctys1), y = (what,who,start,end) 

16 TODO:  could not translate constraint: a = (pat,id) 
 'A4.2.8'
count-concealed-by-patient2(count<x>, a, b) <-
	hasActivated(x, Concealed-by-patient(what, whom, start, end)), a = (pat,id), b = (org,reader,group,spcty), what = (pat,ids,authors,groups,subjects,from-time,to-time), whom = (orgs1,readers1,groups1,spctys1), Get-record-author(pat, id) in authors, Get-record-group(pat, id) in groups, sub in Get-record-subjects(pat, id), sub in subjects, Get-record-time(pat, id) in [from-time, to-time], id in ids, org in orgs1, reader in readers1, group in groups1, spcty in spctys1, Current-time() in [start, end] 

17 TODO:  unbound vars {'a', 'b'} in count-concealed-by-patient2(n, a, b) 
 'A5.3.1'
permits(ag, Read-record-item(pat, id)) <-
	hasActivated(ag, Agent(pat)), count-concealed-by-patient2(n, a, b), count-concealed-by-clinician(m, pat, id), third-party-consent(consenters, pat, id), a = (pat,id), b = ("No-org",ag,"No-group","No-spcty"), n = 0, m = 0, Get-record-third-parties(pat, id) subseteq consenters 

18 TODO:  unbound vars {'a', 'b'} in count-concealed-by-patient2(n, a, b) 
 'A5.3.4'
permits(cli, Read-record-item(pat, id)) <-
	hasActivated(cli, Clinician(spcty)), canActivate(cli, ADB-treating-clinician(pat, group, spcty)), count-concealed-by-patient2(n, a, b), n = 0, a = (pat,id), b = ("ADB",cli,group,spcty), Get-record-subjects(pat, id) subseteq Permitted-subjects(spcty) 

19 TODO:  unbound vars {'a', 'b'} in count-concealed-by-patient2(n, a, b) 
 'A5.3.5'
permits(cli, Read-record-item(pat, id)) <-
	hasActivated(cli, Ext-treating-clinician(pat, ra, org, spcty)), count-concealed-by-patient2(n, a, b), n = 0, a = (pat,id), b = (org,cli,"Ext-group",spcty), Get-record-subjects(pat, id) subseteq Permitted-subjects(spcty) 

20 TODO:  unbound vars {'a', 'b'} in count-concealed-by-patient2(n, a, b) 
 'A5.3.6'
permits(pat, Read-record-item(pat, id)) <-
	hasActivated(pat, Patient()), count-concealed-by-patient2(n, a, b), count-concealed-by-clinician(m, pat, id), third-party-consent(consenters, pat, id), n = 0, m = 0, a = (pat,id), b = ("No-org",pat,"No-group","No-spcty"), Get-record-third-parties(pat, id) subseteq consenters 

Done. Wrote to hospital.py


Translating 37 rules in ra...

21 TODO:  unable to bind vars {'start'} in constraint start in vrange(self.start, self.end) 
 'R2.1.3'
isDeactivated(mgr, NHS-clinician-cert(org, cli, spcty, start, end)) <-
	other-NHS-health-org-regs(n, x, org, start2, end2), n = 0, start in [start2, end2], end in [start2, end2], start < end 

22 TODO:  unable to bind vars {'start'} in constraint start in vrange(self.start, self.end) 
 'R2.2.3'
isDeactivated(mgr, NHS-Caldicott-guardian-cert(org, cg, start, end)) <-
	other-NHS-health-org-regs(n, x, org, start2, end2), start in [start2, end2], end in [start2, end2], start < end, n = 0 

Done. Wrote to ra.py


